{"componentChunkName":"component---src-pages-projects-js","path":"/projects/","result":{"data":{"githubData":{"data":{"user":{"repositories":{"edges":[{"node":{"name":"HappyActive","description":"It's an android app for grandkids and grandparents with activity ideas to do together. ","url":"https://github.com/ZakharA/HappyActive","isPrivate":false,"repositoryTopics":{"edges":[{"node":{"topic":{"name":"android"}}},{"node":{"topic":{"name":"jetpack"}}}]},"stargazers":{"totalCount":1},"readme":{"text":"# HappyActive\n<a href='https://play.google.com/store/apps/details?id=edu.monash.student.happyactive&hl=en&pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'><img alt='Get it on Google Play' src='https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png' width='200' /></a>\n![Image](https://github.com/ZakharA/HappyActive/blob/master/happyactive.png)\n## Table of contents\n* [Project description](#project-description)\n* [Technologies](#technologies)\n* [Setup](#google-play)\n* [Team](#team)\n* [Google play](#google-play)\n\n## Project description\nHappyActive is an android application written using modern tech stack as a capstone project. The main goal is to promote an active lifestyle among elderly Australians with arthritis by teaming them up with their grandkids to do fun activities together. \n\nMain features:\n * Activities bundles\n * Notifications and daily reminders\n * Step by step activities guides\n * Analytics and Statistics\n * Simple step counter\n * Photo diary \n \n## Technologies\nProject is created with:\n * Java 1.8\n * Material Design components\n\nJetpack libraires:\n  * ROOM\n  * Navigation\n  * page 2.2\n  * and more\n\t\n## Setup\nTo run this project:\n1. clone the repository\n2. run gradle build\n3. configure a device in the emulator or use a physical device - **min API level 16**\n4. run the application on the device\n\n## Team \n\n1. Arsentii Zakharchenko\n2. Mohak Wathare\n3. Shijia Cui\n4. ZhiMeng Chen\n\n### Google play\n<a href='https://play.google.com/store/apps/details?id=edu.monash.student.happyactive&hl=en&pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'><img alt='Get it on Google Play' src='https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png' width='200' /></a>\n"}}},{"node":{"name":"yap","description":"This is my portfolio website.","url":"https://github.com/ZakharA/yap","isPrivate":false,"repositoryTopics":{"edges":[{"node":{"topic":{"name":"react"}}},{"node":{"topic":{"name":"javascript"}}},{"node":{"topic":{"name":"gatsby"}}}]},"stargazers":{"totalCount":0},"readme":{"text":"# Yep, a small description\n\nThis is my portfolio or personal website. "}}},{"node":{"name":"tagStore","description":"An extended version of IWebLens that uses S3, Lambda, API Gateway and DynamoDB for automated object-detection tagging and query handling. ","url":"https://github.com/ZakharA/tagStore","isPrivate":false,"repositoryTopics":{"edges":[{"node":{"topic":{"name":"aws"}}},{"node":{"topic":{"name":"python"}}}]},"stargazers":{"totalCount":0},"readme":{"text":"\n## Table of contents\n* [Project description](#project-description)\n* [Technologies](#technologies)\n\n## Project description\nAn AWS Cloud-based solution that uses services such as S3, Lambda, API\nGateway and  DynamoDB to build a system for automated object-detection tagging\nand query handling.\nThe backend allows end users to upload their images into an S3 bucket. After that, a lambda function is automatically\ntriggered to  run the Yolo object detection function and detects the list of objects in the image and stores\nthe list of detected objects along with the URL of the image (S3 URL) in DynamoDB. Futhermore, the end-user can queries images by tags, API endpoint using API Gateway to search tagged images and return links.\n\n## Technologies\nProject is created with:\n * Python 3.6\n * OpenCV\n * YOLO tiny\n \n## AWS components\n  1) S3\n  2) Lambda \n  3) API Gateway \n  4) DynamoDB\n"}}},{"node":{"name":"IWebLens","description":"A docker-based object detection application orchestrated by k8s. Object-detection uses YOLO tiny and OpenCV for detection and image transformations.","url":"https://github.com/ZakharA/IWebLens","isPrivate":false,"repositoryTopics":{"edges":[{"node":{"topic":{"name":"k8s"}}},{"node":{"topic":{"name":"docker"}}},{"node":{"topic":{"name":"python3"}}},{"node":{"topic":{"name":"opencv"}}},{"node":{"topic":{"name":"yolo3"}}}]},"stargazers":{"totalCount":0},"readme":{"text":"\n## Table of contents\n* [Project description](#project-description)\n* [Technologies](#technologies)\n* [Setup](#setup)\n\n\n## Project description\n IWeblens allows end-users to send an image via http request to a web service hosted in a Docker container and receive a list of objects detected in their\nuploaded image.The project makes use of YOLO  and OpenCV to perform required image\noperations/transformations and object detection.Additionally, Kubernetes is used as the container orchestration system.The object\ndetection web service is also designed using a RESTful API that can use Python’s FLASK library. \n\n \n## Technologies\nProject is created with:\n * Python 3.6\n * Flask\n * OpenCV\n * YOLO tiny\n * Docker\n * Kubernetes\n\n## Setup\nTo run this project:\n1. use kind-config to konfigure k8s on a local machine\n2. build an image using Dockerfile\n3. configure k8s service using service.yaml\n4. apply deployment.yaml\n5. that's it, you can run test script to send images and recieve object with detected objects\n"}}},{"node":{"name":"EventsNearMe","description":"An ASP.Net website where users can browse and search events around them. ","url":"https://github.com/ZakharA/EventsNearMe","isPrivate":false,"repositoryTopics":{"edges":[{"node":{"topic":{"name":"asp-net-mvc"}}},{"node":{"topic":{"name":"html"}}},{"node":{"topic":{"name":"csharp"}}},{"node":{"topic":{"name":"javascript"}}}]},"stargazers":{"totalCount":0},"readme":{"text":"# EventsNearMe\n\n## Table of contents\n* [Project description](#project-description)\n* [Technologies](#technologies)\n\n## Project description\nA ASP.Net website where users can browse and search events around them. Written using ASP.NET MVC, JS, CSS, HTML. \n\nMain features:\n * Registration\n * Login\n * CRUD events\n * User roles (Admin, Event Organizer, User) \n \n## Technologies\nProject is created with:\n * ASP.NET MVC\n * Javascript\n * CSS\n * HTML\n\n"}}},{"node":{"name":"NativeAnimals","description":"A Java EE application allows users to browse and search for native animals of different countries. Written using JASS, EJBs, Beans, Beans validation, JPA.","url":"https://github.com/ZakharA/NativeAnimals","isPrivate":false,"repositoryTopics":{"edges":[{"node":{"topic":{"name":"jass"}}},{"node":{"topic":{"name":"ejb"}}},{"node":{"topic":{"name":"beans"}}},{"node":{"topic":{"name":"validation"}}},{"node":{"topic":{"name":"jpa"}}}]},"stargazers":{"totalCount":0},"readme":{"text":"\n## Table of contents\n* [Project description](#project-description)\n* [Technologies](#technologies)\n\n## Project description\nA Java EE application allows users to browse and search for native\nanimals of different countries. Written using JASS, EJBs, Beans, Beans validation, JPA.\n\nMain features:\n * Registration\n * Login\n * CRUD animals\n * User roles\n * Search animals\n \n## Java EE components:\n* JAAS Authentication\n* Role based authentication - role-based authentication mechanism with two roles to facilitate CRUD (admin and contributor).\n* EJBs - BOTH Criteria API and JPQL are used for data retrieval.\n* Bean validations \n* JPA - mapping of inheritance to database.\n \n## Technologies\nProject is created with:\n * Java EE 8\n * HTML\n * Javascript\n * Bootstrap 4\n"}}},{"node":{"name":"CalorieTracker","description":"An android app for tracking calorie intake written in Java.","url":"https://github.com/ZakharA/CalorieTracker","isPrivate":false,"repositoryTopics":{"edges":[{"node":{"topic":{"name":"android"}}},{"node":{"topic":{"name":"java-8"}}},{"node":{"topic":{"name":"rest-api"}}}]},"stargazers":{"totalCount":0},"readme":{"text":"![Image](https://github.com/ZakharA/CalorieTracker/blob/master/calorieTrackerAd.png)\n\n## Table of contents\n* [Project description](#project-description)\n* [Technologies](#technologies)\n* [Setup](#google-play)\n\n## Project description\nCalorieTracker keeps track of what you eat, your daily calorie intake and calories burned, and provide you with useful\ninformation and reports. It also allow you to set goals and inform you every day if you have met your goals.\n\nMain features:\n![Image](https://github.com/ZakharA/CalorieTracker/blob/master/features1.png)\n![Image](https://github.com/ZakharA/CalorieTracker/blob/master/features2.png)\n\n## Technologies\nThe application interacts with public web APIs and the REST web service to query and retrieve information. \nIt also receives user input, query web services, retrieve and process data, and create useful reports with the user’s burned and consumed calories.\n\nProject is created with:\n * Java 1.8\n * Material Design components\n * ROOM\n * Gson\n * Public Food API - https://ndb.nal.usda.gov/ndb/api/doc\n \n \n \n## Setup\nTo run this project:\n1. clone the repository\n2. run gradle build\n3. configure a device in the emulator or use a physical device - **min API level 16**\n4. run the application on the device\n"}}},{"node":{"name":"CalorieTrackerWS","description":"The backend of CalorieTracker written using Java EE8, JAX-RS and Java DB","url":"https://github.com/ZakharA/CalorieTrackerWS","isPrivate":false,"repositoryTopics":{"edges":[{"node":{"topic":{"name":"javaee8"}}},{"node":{"topic":{"name":"jax-rs"}}},{"node":{"topic":{"name":"javdb"}}},{"node":{"topic":{"name":"jpql"}}},{"node":{"topic":{"name":"rest-api"}}}]},"stargazers":{"totalCount":0},"readme":{"text":"# CalorieTrackerWS\nServer side components of a mobile distributed system for a CalorieTracker app. It consists of two main parts, Java 8 ee backed REST API and DB. \n\n## Table of contents\n* [Project description](#project-description)\n* [Technologies](#technologies)\n* [DB ER diagram](#db-er-diagram)\n* [REST API](#rest-api)\n\n## Project description\n\nComponents: \n 1) a database (Java DB database in NetBeans) \n 2) a RESTful web service that enables querying this data and updating it if necessary.\n \n## Technologies\nProject is created with:\n * Java 8 EE\n * JAX-RS \n * Java DB\n * JPQL\n\t\n## DB ER diagram\n![Image](https://github.com/ZakharA/CalorieTrackerWS/blob/master/Screen%20Shot%202020-08-19%20at%2019.00.00.png)\n\n## REST API\nREST API utilizes both static and dynamic queries to access the db. \nFeatures:\n * calculation of BMR, calories burned per step, resting calories burned, total calires burned.\n * Reports data generation. \n\nAn example of API endpoints. \n![Image](https://github.com/ZakharA/CalorieTrackerWS/blob/master/Screen%20Shot%202020-08-19%20at%2019.03.50.png)\n\n\n"}}}]}}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}